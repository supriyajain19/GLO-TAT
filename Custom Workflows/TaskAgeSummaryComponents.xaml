<Activity mc:Ignorable="sap sap2010 sads" x:Class="TaskAgeSummaryComponents"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_GLOTemplatePath" Type="InArgument(x:String)" />
    <x:Property Name="in_CurrentMonth" Type="InArgument(x:String)" />
    <x:Property Name="in_CurrentYear" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>TaskAgeSummaryComponents_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.Office.Interop.Excel</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Orchestrator.Client</x:String>
      <x:String>UiPath.Orchestrator.Client.Models</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Credentials.Activities</x:String>
      <x:String>UiPath.Database.Activities</x:String>
      <x:String>UiPath.Database</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.CSV.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.CSV</x:String>
      <x:String>UiPath.FTP.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Mail.Exchange.Activities</x:String>
      <x:String>UiPath.Mail.IMAP.Activities</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Mail.POP3.Activities</x:String>
      <x:String>UiPath.Mail.SMTP.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Excel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.OrchestratorClient</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Credentials.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Database</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.FTP.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="First sheet pivot tables Sequence" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excel As microsoft.Office.Interop.Excel.Application&#xA;Dim wb1 As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim p_ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim rng As Microsoft.Office.Interop.Excel.Range &#xA;Dim p_rng As Microsoft.Office.Interop.Excel.Range&#xA;Dim lastRow As Integer&#xA;Try&#xA; excel = New Microsoft.Office.Interop.Excel.ApplicationClass'create the instance of excel work book'&#xA; 'wb = excel.Workbooks.Open(&quot;C:\Users\svc_friend2\Documents\GLO_All_Data_with_SLAs 5_7_19.xlsx&quot;)'Open the excel the file'&#xA; wb1=excel.Workbooks.Open(arg_GLOTemplatePath+&quot;GLO_&quot;+arg_CurrentFiscalMonth+&quot;’&quot;+arg_CurrentFiscalYear+&quot;_YTD_DASHBOARD.xlsb&quot;)&#xA; excel.Visible=True&#xA; &#xA;&#xA; ws=CType(wb1.Sheets(&quot;Data&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; ws.Activate&#xA;&#xA; lastRow = ws.UsedRange.Rows.Count&#xA; &#xA;Dim cn As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;For Each cn In wb1.Connections&#xA; If cn.Name &lt;&gt; &quot;ThisWorkbookDataModel&quot; Then&#xA; ' cn.delete&#xA; End If&#xA;Next &#xA;  &#xA;  With wb1&#xA; &#xA; cn=  .Connections.Add2(Name :=&quot;DataModel&quot;,Description:=&quot;DataModel&quot;,ConnectionString:=&quot;WORKSHEET;&quot;+wb1.FullName,CommandText:=ws.Name+&quot;!&quot;+ws.Range(&quot;A1&quot;).CurrentRegion.address,lCmdtype:=Microsoft.Office.Interop.Excel.XlCmdType.xlCmdExcel,CreateModelConnection:=True)&#xA;&#xA; End With &#xA;    &#xA; 'rng=ws.Range(&quot;A1&quot;,&quot;O&quot;+lastRow.ToString)'Selects the given range of sheet 1'&#xA; 'p_ws=CType(wb.Sheets.Add,Microsoft.Office.Interop.Excel.Worksheet)'create a empty and and name the sheet as pivot table'&#xA; 'p_ws.Name=&quot;Pivot Test&quot;&#xA; p_ws=CType(wb1.Sheets(&quot;Task Age Summary&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; p_ws.Activate&#xA;&#xA;&#xA; &#xA; p_rng= CType(p_ws.Range(&quot;G13&quot;),Microsoft.Office.Interop.Excel.Range) 'Specify the first cell for the pivot table'&#xA; &#xA; 'Creation pivot Cache and pivot table '&#xA; Dim oPivotCache As Microsoft.Office.Interop.Excel.PivotCache=Nothing&#xA; Dim oPivotTables As Microsoft.Office.Interop.Excel.PivotTables=Nothing&#xA; Dim oPivotTable As Microsoft.Office.Interop.Excel.PivotTable=Nothing&#xA;&#xA;&#xA;oPivotCache =CType(wb1.PivotCaches.Create(SourceType:=Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlExternal,SourceData:=cn,Version:=Microsoft.Office.Interop.Excel.XlPivotTableVersionList.xlPivotTableVersion15),Microsoft.Office.Interop.Excel.PivotCache)&#xA;&#xA;oPivotTables=DirectCast(p_ws.PivotTables(Type.Missing),Microsoft.Office.Interop.Excel.PivotTables)&#xA;&#xA; oPivotTable=oPivotTables.Add(oPivotCache,p_rng,&quot;TASK COUNT BY TASK AGING CATEGORY BY REGION&quot;,Type.Missing,Type.Missing)'first paramenter is cache,range the table should start,table name'&#xA; oPivotTable.SmallGrid=False&#xA; oPivotTable.ShowTableStyleRowStripes=True&#xA; oPivotTable.TableStyle2=&quot;PivotStyleMedium2&quot;&#xA;&#xA;&#xA; 'Creation of pivot Fields'&#xA; &#xA;&#xA;Dim CubeField1 As Microsoft.Office.Interop.Excel.CubeField &#xA;Dim CubeField2 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField3 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField4 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField5 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField6 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField7 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField8 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField9 As Microsoft.Office.Interop.Excel.CubeField&#xA; &#xA;Dim index As Integer = 1&#xA;While index &lt;= CInt(oPivotTable.CubeFields.Count)&#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Yr]&quot;) Then &#xA;&#xA;  CubeField1= oPivotTable.CubeFields(index)&#xA;   CubeField1.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;   CubeField1.CurrentPageName=&quot;[Range].[Task Closed Fiscal Yr].&amp;[FY'&quot;+arg_CurrentFiscalYear+&quot;]&quot;&#xA;  'CubeField1.Caption(&quot;Diversity (Yes/No)&quot;)&#xA; Else &#xA; End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Status]&quot;) Then&#xA;&#xA;   CubeField2= oPivotTable.CubeFields(index)&#xA;  CubeField2.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  CubeField2.CurrentPageName=&quot;[Range].[Task Status].&amp;[Closed-Complete]&quot;&#xA;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Ticket Stage]&quot;) Then&#xA;&#xA;   CubeField3= oPivotTable.CubeFields(index)&#xA;  CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  'CubeField3.CurrentPageName=&quot;[Range].[Ticket Stage]&quot;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Catalog]&quot;) Then&#xA;&#xA;   CubeField4= oPivotTable.CubeFields(index)&#xA;  CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Assigned to]&quot;) Then&#xA;&#xA;   CubeField5= oPivotTable.CubeFields(index)&#xA;  CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Requested For Region]&quot;) Then&#xA;&#xA;   CubeField6= oPivotTable.CubeFields(index)&#xA;  CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA; &#xA;  Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Aging Grouping]&quot;) Then&#xA;&#xA;   CubeField7= oPivotTable.CubeFields(index)&#xA;  CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Number]&quot;) Then&#xA;&#xA;   CubeField8= oPivotTable.CubeFields(index)&#xA;  CubeField8 = oPivotTable.CubeFields.GetMeasure(oPivotTable.CubeFields(index).Name, Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlDistinctCount)&#xA;   oPivotTable.AddDataField(CubeField8)&#xA; &#xA;  Else &#xA;  End If &#xA; &#xA; &#xA;  &#xA; index += 1&#xA;End While&#xA;&#xA;Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(oPivotTable.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Task Aging Grouping].[Task Aging Grouping]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;)   &#xA;&#xA;CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY REGION&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; 'Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(PivotAPSpend.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;'Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Ticket Stage].[Ticket Stage]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index1 As Integer = 1&#xA;Dim arrstring As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring As String&#xA;&#xA;Dim pvtitm As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm In pivotItms&#xA;&#xA; If pvtitm.Name.equals( &quot;[Range].[Ticket Stage].&amp;[Cancelled]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring=CType(pvtitm.Name,String)&#xA;  &#xA;  arrstring.Add(itemstring)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF.VisibleItemsList =arrstring.ToArray&#xA;    CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA; CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend1 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY REGION&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs1 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs1 = CType(PivotAPSpend1.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF1 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF1=CType(PTFs1.Item(&quot;[Range].[Item Catalog].[Item Catalog]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms1 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF1.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index2 As Integer = 1&#xA;Dim arrstring1 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring1 As String&#xA;&#xA;Dim pvtitm1 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm1 In pivotItms1&#xA;&#xA; If pvtitm1.Name.equals( &quot;[Range].[Item Catalog].&amp;[Incoming]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring1=CType(pvtitm1.Name,String)&#xA;  &#xA;  arrstring1.Add(itemstring1)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF1.VisibleItemsList =arrstring1.ToArray&#xA;    CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA; &#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend2 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY REGION&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs2 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs2 = CType(PivotAPSpend2.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF2 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF2=CType(PTFs2.Item(&quot;[Range].[Task Assigned to].[Task Assigned to]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms2 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF2.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index3 As Integer = 1&#xA;Dim arrstring2 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring2 As String&#xA;&#xA;Dim pvtitm2 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm2 In pivotItms2&#xA;&#xA; If pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;[Mandhare, Ajay]&quot;) Or pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring2=CType(pvtitm2.Name,String)&#xA;  &#xA;  arrstring2.Add(itemstring2)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF2.VisibleItemsList =arrstring2.ToArray&#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend3 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY REGION&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs3 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs3 = CType(PivotAPSpend3.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF3 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF3=CType(PTFs3.Item(&quot;[Range].[Requested For Region].[Requested For Region]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms3 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF3.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index4 As Integer = 1&#xA;Dim arrstring3 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring3 As String&#xA;&#xA;Dim pvtitm3 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm3 In pivotItms3&#xA;&#xA; If pvtitm3.Name.equals(&quot;[Range].[Requested For Region].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring3=CType(pvtitm3.Name,String)&#xA;  &#xA;  arrstring3.Add(itemstring3)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF3.VisibleItemsList =arrstring3.ToArray&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;&#xA;oPivotTable.RowAxisLayout(Microsoft.Office.Interop.Excel.XlLayoutRowType.xlTabularRow) &#xA;&#xA;Dim AddNo As Integer=15&#xA;While  p_ws.Range(&quot;G&quot;+AddNo.ToString).Value.ToString&lt;&gt;&quot;Grand Total&quot;&#xA;AddNo =AddNo+ 1&#xA;End While&#xA;p_ws.Range(&quot;H14:J14&quot;).Copy&#xA;p_ws.Range(&quot;G27&quot;).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues) &#xA;p_ws.Range(&quot;H&quot;+AddNo.ToString+&quot;:J&quot;+AddNo.ToString).Copy&#xA;p_ws.Range(&quot;G&quot;+(AddNo+2).ToString).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues) &#xA;&#xA;p_ws.Range(&quot;H15:K&quot;+AddNo.ToString).HorizontalAlignment=Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter&#xA;&#xA;Dim chtobjs As Microsoft.Office.Interop.Excel.ChartObjects&#xA;Dim chtobj As Microsoft.Office.Interop.Excel.ChartObject&#xA;Dim chtobj1 As Microsoft.Office.Interop.Excel.ChartObject&#xA;Dim cht As Microsoft.Office.Interop.Excel.Chart&#xA;&#xA;rng=p_ws.Range(&quot;G&quot;+(AddNo+1).ToString+&quot;:I&quot;+(AddNo+2).ToString)   &#xA;chtobjs = CType(p_ws.ChartObjects(),Microsoft.Office.Interop.Excel.ChartObjects)&#xA;chtobj = chtobjs.Add(CType(p_ws.Range(&quot;G&quot;+(AddNo+1).ToString).Left,System.Double),CType(p_ws.Range(&quot;G&quot;+(AddNo+1).ToString).Top,System.Double),400,200)&#xA;chtobj.Chart.ChartWizard(p_ws.Range(&quot;G&quot;+(AddNo+1).ToString+&quot;:I&quot;+(AddNo+2).ToString),Gallery:=Microsoft.Office.Interop.Excel.XlChartType.xlColumnClustered,Title:=&quot;Task Count by Region&quot;,CategoryLabels:=True,SeriesLabels:=False,HasLegend:=False)&#xA;chtobj.Name=&quot;NewChartObject&quot;&#xA;chtobj.Chart.ApplyDataLabels&#xA;Dim axisobj As Microsoft.Office.Interop.Excel.axis&#xA;axisobj = CType(chtobj.Chart.Axes(Microsoft.Office.Interop.Excel.XlAxisType.xlCategory),Microsoft.Office.Interop.Excel.axis)&#xA;axisobj.MajorGridlines.Format.Line.Visible=Microsoft.Office.Core.MsoTriState.msoFalse&#xA;&#xA;&#xA;rng=p_ws.Range(&quot;G7:K&quot;+AddNo.ToString)   &#xA;chtobjs = CType(p_ws.ChartObjects(),Microsoft.Office.Interop.Excel.ChartObjects)&#xA;chtobj = chtobjs.Add(CType(p_ws.Range(&quot;G&quot;+(AddNo+16).ToString).Left,System.Double),CType(p_ws.Range(&quot;G&quot;+(AddNo+16).ToString).Top,System.Double),400,250)&#xA;chtobj.Chart.ChartWizard(p_ws.Range(&quot;G7:K&quot;+AddNo.ToString),Gallery:=Microsoft.Office.Interop.Excel.XlChartType.xlColumnClustered,CategoryLabels:=True,SeriesLabels:=False,HasLegend:=False)&#xA;chtobj.Name=&quot;NewChartObject&quot;&#xA;chtobj.Chart.ApplyDataLabels&#xA;&#xA;&#xA;&#xA;&#xA;Catch es As Exception&#xA; Console.WriteLine(es.Message)&#xA; Throw es&#xA; Finally&#xA;  wb1.Save&#xA;  wb1.Close&#xA;  excel.Quit&#xA;End Try&#xA;" DisplayName="Invoke Code-TASK COUNT BY TASK AGING CATEGORY BY REGION" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="arg_GLOTemplatePath">[in_GLOTemplatePath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalMonth">[in_CurrentMonth]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalYear">[in_CurrentYear]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excel As microsoft.Office.Interop.Excel.Application&#xA;Dim wb1 As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim ws1 As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim p_ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim rng As Microsoft.Office.Interop.Excel.Range &#xA;Dim p_rng As Microsoft.Office.Interop.Excel.Range&#xA;Dim lastRow As Integer&#xA;Try&#xA; excel = New Microsoft.Office.Interop.Excel.ApplicationClass'create the instance of excel work book'&#xA; 'wb = excel.Workbooks.Open(&quot;C:\Users\svc_friend2\Documents\GLO_All_Data_with_SLAs 5_7_19.xlsx&quot;)'Open the excel the file'&#xA; wb1=excel.Workbooks.Open(arg_GLOTemplatePath+&quot;GLO_&quot;+arg_CurrentFiscalMonth+&quot;’&quot;+arg_CurrentFiscalYear+&quot;_YTD_DASHBOARD.xlsb&quot;)&#xA; excel.Visible=True&#xA; excel.DisplayAlerts=False&#xA;&#xA;&#xA; ws=CType(wb1.Sheets(&quot;Data&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; ws.Activate&#xA;&#xA; lastRow = ws.UsedRange.Rows.Count&#xA;Dim con As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;Dim cn As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;For Each con In wb1.Connections&#xA; If con.Name &lt;&gt; &quot;DataModel&quot; Then&#xA; cn =con&#xA; End If&#xA;Next &#xA;  &#xA; ' With wb1&#xA; &#xA; 'cn=  .Connections.Add2(Name :=&quot;SpendDataModel&quot;,Description:=&quot;DataModel&quot;,ConnectionString:=&quot;WORKSHEET;&quot;+wb1.FullName,CommandText:=ws.Name+&quot;!&quot;+ws.Range(&quot;A1&quot;).CurrentRegion.address,lCmdtype:=Microsoft.Office.Interop.Excel.XlCmdType.xlCmdExcel,CreateModelConnection:=True)&#xA;&#xA; 'End With &#xA;    &#xA; 'rng=ws.Range(&quot;A1&quot;,&quot;O&quot;+lastRow.ToString)'Selects the given range of sheet 1'&#xA; 'p_ws=CType(wb.Sheets.Add,Microsoft.Office.Interop.Excel.Worksheet)'create a empty and and name the sheet as pivot table'&#xA; 'p_ws.Name=&quot;Pivot Test&quot;&#xA; p_ws=CType(wb1.Sheets(&quot;Task Age Summary&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; p_ws.Activate&#xA;&#xA;&#xA; &#xA; p_rng= CType(p_ws.Range(&quot;O13&quot;),Microsoft.Office.Interop.Excel.Range) 'Specify the first cell for the pivot table'&#xA; &#xA; 'Creation pivot Cache and pivot table '&#xA; Dim oPivotCache As Microsoft.Office.Interop.Excel.PivotCache=Nothing&#xA; Dim oPivotTables As Microsoft.Office.Interop.Excel.PivotTables=Nothing&#xA; Dim oPivotTable As Microsoft.Office.Interop.Excel.PivotTable=Nothing&#xA;&#xA;&#xA;oPivotCache =CType(wb1.PivotCaches.Create(SourceType:=Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlExternal,SourceData:=cn,Version:=Microsoft.Office.Interop.Excel.XlPivotTableVersionList.xlPivotTableVersion15),Microsoft.Office.Interop.Excel.PivotCache)&#xA;&#xA;oPivotTables=DirectCast(p_ws.PivotTables(Type.Missing),Microsoft.Office.Interop.Excel.PivotTables)&#xA;&#xA; oPivotTable=oPivotTables.Add(oPivotCache,p_rng,&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR&quot;,Type.Missing,Type.Missing)'first paramenter is cache,range the table should start,table name'&#xA; oPivotTable.SmallGrid=False&#xA; oPivotTable.ShowTableStyleRowStripes=True&#xA; oPivotTable.TableStyle2=&quot;PivotStyleMedium2&quot;&#xA;&#xA;&#xA; 'Creation of pivot Fields'&#xA; &#xA;&#xA;Dim CubeField1 As Microsoft.Office.Interop.Excel.CubeField &#xA;Dim CubeField2 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField3 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField4 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField5 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField6 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField7 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField8 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField9 As Microsoft.Office.Interop.Excel.CubeField&#xA; &#xA;Dim index As Integer = 1&#xA;While index &lt;= CInt(oPivotTable.CubeFields.Count)&#xA;&#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Yr]&quot;) Then &#xA;&#xA;  CubeField1= oPivotTable.CubeFields(index)&#xA;   CubeField1.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;   CubeField1.CurrentPageName=&quot;[Range].[Task Closed Fiscal Yr].&amp;[FY'&quot;+arg_CurrentFiscalYear+&quot;]&quot;&#xA;  'CubeField1.Caption(&quot;Diversity (Yes/No)&quot;)&#xA; Else &#xA; End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Status]&quot;) Then&#xA;&#xA;   CubeField2= oPivotTable.CubeFields(index)&#xA;  CubeField2.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  CubeField2.CurrentPageName=&quot;[Range].[Task Status].&amp;[Closed-Complete]&quot;&#xA;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Ticket Stage]&quot;) Then&#xA;&#xA;   CubeField3= oPivotTable.CubeFields(index)&#xA;  CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  'CubeField3.CurrentPageName=&quot;[Range].[Ticket Stage]&quot;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Catalog]&quot;) Then&#xA;&#xA;   CubeField4= oPivotTable.CubeFields(index)&#xA;  CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Assigned to]&quot;) Then&#xA;&#xA;   CubeField5= oPivotTable.CubeFields(index)&#xA;  CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Requested For Region]&quot;) Then&#xA;&#xA;   CubeField6= oPivotTable.CubeFields(index)&#xA;  CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Aging Grouping]&quot;) Then&#xA;&#xA;   CubeField7= oPivotTable.CubeFields(index)&#xA;  CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Number]&quot;) Then&#xA;&#xA;   CubeField8= oPivotTable.CubeFields(index)&#xA;  CubeField8 = oPivotTable.CubeFields.GetMeasure(oPivotTable.CubeFields(index).Name, Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlDistinctCount)&#xA;   oPivotTable.AddDataField(CubeField8)&#xA; &#xA;  Else &#xA;  End If &#xA;    If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Qtr]&quot;) Then&#xA;&#xA;   CubeField9= oPivotTable.CubeFields(index)&#xA;  CubeField9.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA; &#xA;  Else &#xA;  End If &#xA; &#xA;  &#xA; index += 1&#xA;End While&#xA;&#xA;Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(oPivotTable.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Task Aging Grouping].[Task Aging Grouping]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;)   &#xA;&#xA;&#xA;&#xA;CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; 'Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(PivotAPSpend.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;'Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Ticket Stage].[Ticket Stage]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index1 As Integer = 1&#xA;Dim arrstring As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring As String&#xA;&#xA;Dim pvtitm As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm In pivotItms&#xA;&#xA; If pvtitm.Name.equals( &quot;[Range].[Ticket Stage].&amp;[Cancelled]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring=CType(pvtitm.Name,String)&#xA;  &#xA;  arrstring.Add(itemstring)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF.VisibleItemsList =arrstring.ToArray&#xA;    CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA; CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend1 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs1 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs1 = CType(PivotAPSpend1.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF1 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF1=CType(PTFs1.Item(&quot;[Range].[Item Catalog].[Item Catalog]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms1 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF1.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index2 As Integer = 1&#xA;Dim arrstring1 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring1 As String&#xA;&#xA;Dim pvtitm1 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm1 In pivotItms1&#xA;&#xA; If pvtitm1.Name.equals( &quot;[Range].[Item Catalog].&amp;[Incoming]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring1=CType(pvtitm1.Name,String)&#xA;  &#xA;  arrstring1.Add(itemstring1)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF1.VisibleItemsList =arrstring1.ToArray&#xA;    CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA; &#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend2 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs2 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs2 = CType(PivotAPSpend2.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF2 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF2=CType(PTFs2.Item(&quot;[Range].[Task Assigned to].[Task Assigned to]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms2 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF2.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index3 As Integer = 1&#xA;Dim arrstring2 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring2 As String&#xA;&#xA;Dim pvtitm2 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm2 In pivotItms2&#xA;&#xA; If pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;[Mandhare, Ajay]&quot;) Or pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring2=CType(pvtitm2.Name,String)&#xA;  &#xA;  arrstring2.Add(itemstring2)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF2.VisibleItemsList =arrstring2.ToArray&#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend3 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs3 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs3 = CType(PivotAPSpend3.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF3 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF3=CType(PTFs3.Item(&quot;[Range].[Requested For Region].[Requested For Region]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms3 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF3.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index4 As Integer = 1&#xA;Dim arrstring3 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring3 As String&#xA;&#xA;Dim pvtitm3 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm3 In pivotItms3&#xA;&#xA; If pvtitm3.Name.equals(&quot;[Range].[Requested For Region].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring3=CType(pvtitm3.Name,String)&#xA;  &#xA;  arrstring3.Add(itemstring3)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF3.VisibleItemsList =arrstring3.ToArray&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;oPivotTable.RowAxisLayout(Microsoft.Office.Interop.Excel.XlLayoutRowType.xlTabularRow) &#xA;&#xA;Dim AddNo As Integer=15&#xA;While  p_ws.Range(&quot;O&quot;+AddNo.ToString).Value.ToString&lt;&gt;&quot;Grand Total&quot;&#xA;AddNo =AddNo+ 1&#xA;End While&#xA;&#xA; ws1=CType(wb1.Sheets.Add,Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA;ws1.Name=&quot;TempSheet&quot;&#xA;&#xA;p_ws.Range(&quot;P14:T14&quot;).Copy&#xA;ws1.Range(&quot;P28&quot;).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues)&#xA;&#xA;p_ws.Range(&quot;O&quot;+AddNo.ToString+&quot;:T&quot;+AddNo.ToString).Copy&#xA;ws1.Range(&quot;O29&quot;).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues)&#xA;&#xA;ws1.Range(&quot;P28:T29&quot;).Columns.Find(&quot;Grand Total&quot;).End(Microsoft.Office.Interop.Excel.XlDirection.xlDown).Delete&#xA;ws1.Range(&quot;P28:T29&quot;).Columns.Find(&quot;Grand Total&quot;).Delete&#xA;'ws1.Range(&quot;O28:T29&quot;).Cells.Find(&quot;Row Labels&quot;).Delete&#xA;'ws1.Range(&quot;O28:T29&quot;).Columns.Find(&quot;Row Labels&quot;).&#xA;ws1.Range(&quot;P28:T29&quot;).Copy&#xA;&#xA;p_ws.Range(&quot;P&quot;+(AddNo+2).ToString).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues)&#xA;&#xA;p_ws.Range(&quot;P15:T&quot;+AddNo.ToString).HorizontalAlignment=Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter&#xA;Dim chtobjs As Microsoft.Office.Interop.Excel.ChartObjects&#xA;Dim chtobj As Microsoft.Office.Interop.Excel.ChartObject&#xA;Dim chtobj1 As Microsoft.Office.Interop.Excel.ChartObject&#xA;Dim cht As Microsoft.Office.Interop.Excel.Chart&#xA;&#xA;&#xA;&#xA;rng=p_ws.Range(&quot;O&quot;+(AddNo+2).ToString+&quot;:S&quot;+(AddNo+3).ToString)   &#xA;chtobjs = CType(p_ws.ChartObjects(),Microsoft.Office.Interop.Excel.ChartObjects)&#xA;chtobj = chtobjs.Add(CType(p_ws.Range(&quot;O&quot;+(AddNo+2).ToString).Left,System.Double),CType(p_ws.Range(&quot;O&quot;+(AddNo+2).ToString).Top,System.Double),390,220)&#xA;chtobj.Chart.ChartWizard(p_ws.Range(&quot;O&quot;+(AddNo+2).ToString+&quot;:S&quot;+(AddNo+3).ToString),Gallery:=Microsoft.Office.Interop.Excel.XlChartType.xlLineMarkers,CategoryLabels:=True,SeriesLabels:=False,HasLegend:=False)&#xA;chtobj.Name=&quot;NewChartObject&quot;&#xA;chtobj.Chart.ApplyDataLabels&#xA;&#xA;ws1=CType(wb1.Sheets(&quot;TempSheet&quot;),Microsoft.Office.Interop.Excel.Worksheet)&#xA; ws1.Delete&#xA;&#xA;Catch es As Exception&#xA; Console.WriteLine(es.Message)&#xA; Console.WriteLine(es.Source)&#xA; Throw es&#xA;Finally&#xA; wb1.Save&#xA; wb1.Close&#xA; excel.Quit&#xA;End Try" DisplayName="Invoke Code-TASK COUNT BY TASK AGING CATEGORY BY QTR" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalYear">[in_CurrentYear]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalMonth">[in_CurrentMonth]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_GLOTemplatePath">[in_GLOTemplatePath]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excel As microsoft.Office.Interop.Excel.Application&#xA;Dim wb1 As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim p_ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim rng As Microsoft.Office.Interop.Excel.Range &#xA;Dim p_rng As Microsoft.Office.Interop.Excel.Range&#xA;Dim lastRow As Integer&#xA;Try&#xA; excel = New Microsoft.Office.Interop.Excel.ApplicationClass'create the instance of excel work book'&#xA; 'wb = excel.Workbooks.Open(&quot;C:\Users\svc_friend2\Documents\GLO_All_Data_with_SLAs 5_7_19.xlsx&quot;)'Open the excel the file'&#xA; wb1=excel.Workbooks.Open(arg_GLOTemplatePath+&quot;GLO_&quot;+arg_CurrentFiscalMonth+&quot;’&quot;+arg_CurrentFiscalYear+&quot;_YTD_DASHBOARD.xlsb&quot;)&#xA; excel.Visible=True&#xA; &#xA;&#xA; ws=CType(wb1.Sheets(&quot;Data&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; ws.Activate&#xA;&#xA; lastRow = ws.UsedRange.Rows.Count&#xA; &#xA;Dim con As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;Dim cn As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;For Each con In wb1.Connections&#xA; If con.Name &lt;&gt; &quot;DataModel&quot; Then&#xA; cn =con&#xA; End If&#xA;Next &#xA;  'With wb1&#xA; &#xA; 'cn=  .Connections.Add2(Name :=&quot;SpendDataModel&quot;,Description:=&quot;DataModel&quot;,ConnectionString:=&quot;WORKSHEET;&quot;+wb1.FullName,CommandText:=ws.Name+&quot;!&quot;+ws.Range(&quot;A1&quot;).CurrentRegion.address,lCmdtype:=Microsoft.Office.Interop.Excel.XlCmdType.xlCmdExcel,CreateModelConnection:=True)&#xA;&#xA;' End With &#xA;    &#xA; 'rng=ws.Range(&quot;A1&quot;,&quot;O&quot;+lastRow.ToString)'Selects the given range of sheet 1'&#xA; 'p_ws=CType(wb.Sheets.Add,Microsoft.Office.Interop.Excel.Worksheet)'create a empty and and name the sheet as pivot table'&#xA; 'p_ws.Name=&quot;Pivot Test&quot;&#xA; p_ws=CType(wb1.Sheets(&quot;Task Age Summary&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; p_ws.Activate&#xA;&#xA;&#xA; &#xA; p_rng= CType(p_ws.Range(&quot;V13&quot;),Microsoft.Office.Interop.Excel.Range) 'Specify the first cell for the pivot table'&#xA; &#xA; 'Creation pivot Cache and pivot table '&#xA; Dim oPivotCache As Microsoft.Office.Interop.Excel.PivotCache=Nothing&#xA; Dim oPivotTables As Microsoft.Office.Interop.Excel.PivotTables=Nothing&#xA; Dim oPivotTable As Microsoft.Office.Interop.Excel.PivotTable=Nothing&#xA;&#xA;&#xA;oPivotCache =CType(wb1.PivotCaches.Create(SourceType:=Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlExternal,SourceData:=cn,Version:=Microsoft.Office.Interop.Excel.XlPivotTableVersionList.xlPivotTableVersion15),Microsoft.Office.Interop.Excel.PivotCache)&#xA;&#xA;oPivotTables=DirectCast(p_ws.PivotTables(Type.Missing),Microsoft.Office.Interop.Excel.PivotTables)&#xA;&#xA; oPivotTable=oPivotTables.Add(oPivotCache,p_rng,&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY&quot;,Type.Missing,Type.Missing)'first paramenter is cache,range the table should start,table name'&#xA; oPivotTable.SmallGrid=False&#xA; oPivotTable.ShowTableStyleRowStripes=True&#xA; oPivotTable.TableStyle2=&quot;PivotStyleMedium2&quot;&#xA;&#xA;&#xA; 'Creation of pivot Fields'&#xA; &#xA;&#xA;Dim CubeField1 As Microsoft.Office.Interop.Excel.CubeField &#xA;Dim CubeField2 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField3 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField4 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField5 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField6 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField7 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField8 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField9 As Microsoft.Office.Interop.Excel.CubeField&#xA;  Dim CubeField10 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim index As Integer = 1&#xA;While index &lt;= CInt(oPivotTable.CubeFields.Count)&#xA;&#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Yr]&quot;) Then &#xA;&#xA;  CubeField1= oPivotTable.CubeFields(index)&#xA;   CubeField1.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;   CubeField1.CurrentPageName=&quot;[Range].[Task Closed Fiscal Yr].&amp;[FY'&quot;+arg_CurrentFiscalYear+&quot;]&quot;&#xA;  'CubeField1.Caption(&quot;Diversity (Yes/No)&quot;)&#xA;&#xA; Else &#xA; End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Status]&quot;) Then&#xA;&#xA;   CubeField2= oPivotTable.CubeFields(index)&#xA;  CubeField2.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  CubeField2.CurrentPageName=&quot;[Range].[Task Status].&amp;[Closed-Complete]&quot;&#xA;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Ticket Stage]&quot;) Then&#xA;&#xA;   CubeField3= oPivotTable.CubeFields(index)&#xA;  CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  'CubeField3.CurrentPageName=&quot;[Range].[Ticket Stage]&quot;&#xA; &#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Catalog]&quot;) Then&#xA;&#xA;   CubeField4= oPivotTable.CubeFields(index)&#xA;  CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Assigned to]&quot;) Then&#xA;&#xA;   CubeField5= oPivotTable.CubeFields(index)&#xA;  CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Requested For Region]&quot;) Then&#xA;&#xA;   CubeField6= oPivotTable.CubeFields(index)&#xA;  CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Aging Grouping]&quot;) Then&#xA;&#xA;   CubeField7= oPivotTable.CubeFields(index)&#xA;  CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Number]&quot;) Then&#xA;&#xA;   CubeField8= oPivotTable.CubeFields(index)&#xA;  CubeField8 = oPivotTable.CubeFields.GetMeasure(oPivotTable.CubeFields(index).Name, Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlDistinctCount)&#xA;   oPivotTable.AddDataField(CubeField8)&#xA; &#xA;  Else &#xA;  End If &#xA;    If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Qtr]&quot;) Then&#xA;&#xA;   CubeField9= oPivotTable.CubeFields(index)&#xA;  CubeField9.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;&#xA;  Else &#xA;  End If &#xA;      If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Category]&quot;) Then&#xA;&#xA;   CubeField10= oPivotTable.CubeFields(index)&#xA;  'CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA;  Else &#xA;  End If &#xA; &#xA;  &#xA; index += 1&#xA;End While&#xA;&#xA;CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;'CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA;Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(oPivotTable.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Task Aging Grouping].[Task Aging Grouping]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;)   &#xA;CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Item Category].[Item Category]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;)  &#xA;CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; 'Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(PivotAPSpend.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;'Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Ticket Stage].[Ticket Stage]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index1 As Integer = 1&#xA;Dim arrstring As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring As String&#xA;&#xA;Dim pvtitm As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm In pivotItms&#xA;&#xA; If pvtitm.Name.equals( &quot;[Range].[Ticket Stage].&amp;[Cancelled]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring=CType(pvtitm.Name,String)&#xA;  &#xA;  arrstring.Add(itemstring)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF.VisibleItemsList =arrstring.ToArray&#xA;    CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA; CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend1 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs1 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs1 = CType(PivotAPSpend1.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF1 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF1=CType(PTFs1.Item(&quot;[Range].[Item Catalog].[Item Catalog]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms1 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF1.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index2 As Integer = 1&#xA;Dim arrstring1 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring1 As String&#xA;&#xA;Dim pvtitm1 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm1 In pivotItms1&#xA;&#xA; If pvtitm1.Name.equals( &quot;[Range].[Item Catalog].&amp;[Incoming]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring1=CType(pvtitm1.Name,String)&#xA;  &#xA;  arrstring1.Add(itemstring1)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF1.VisibleItemsList =arrstring1.ToArray&#xA;    CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA; &#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend2 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs2 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs2 = CType(PivotAPSpend2.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF2 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF2=CType(PTFs2.Item(&quot;[Range].[Task Assigned to].[Task Assigned to]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms2 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF2.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index3 As Integer = 1&#xA;Dim arrstring2 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring2 As String&#xA;&#xA;Dim pvtitm2 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm2 In pivotItms2&#xA;&#xA; If pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;[Mandhare, Ajay]&quot;) Or pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring2=CType(pvtitm2.Name,String)&#xA;  &#xA;  arrstring2.Add(itemstring2)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF2.VisibleItemsList =arrstring2.ToArray&#xA;CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend3 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs3 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs3 = CType(PivotAPSpend3.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF3 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF3=CType(PTFs3.Item(&quot;[Range].[Requested For Region].[Requested For Region]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms3 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF3.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index4 As Integer = 1&#xA;Dim arrstring3 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring3 As String&#xA;&#xA;Dim pvtitm3 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm3 In pivotItms3&#xA;&#xA; If pvtitm3.Name.equals(&quot;[Range].[Requested For Region].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring3=CType(pvtitm3.Name,String)&#xA;  &#xA;  arrstring3.Add(itemstring3)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF3.VisibleItemsList =arrstring3.ToArray&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;oPivotTable.RowAxisLayout(Microsoft.Office.Interop.Excel.XlLayoutRowType.xlTabularRow) &#xA;&#xA;&#xA;Dim Count As Integer&#xA;Dim tempstr As String&#xA;tempstr=p_ws.Range(&quot;V:V&quot;).Find(&quot;Grand Total&quot;).Address.ToString.Replace(&quot;$&quot;,&quot;&quot;).ToString&#xA;count=CInt((Split(tempstr.ToString,&quot;V&quot;)(1).ToString))&#xA;p_ws.Range(&quot;X15:AB&quot;+Count.ToString).HorizontalAlignment=Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter&#xA;Catch es As Exception&#xA; Console.WriteLine(es.Message)&#xA; Console.WriteLine(es.Source)&#xA; Throw es&#xA; Finally&#xA;  wb1.Save&#xA;  wb1.Close&#xA;  excel.Quit&#xA;&#xA;End Try&#xA;" DisplayName="Invoke Code-TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; ITEM CATEGORY" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalYear">[in_CurrentYear]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalMonth">[in_CurrentMonth]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_GLOTemplatePath">[in_GLOTemplatePath]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excel As microsoft.Office.Interop.Excel.Application&#xA;Dim wb1 As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim p_ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim rng As Microsoft.Office.Interop.Excel.Range &#xA;Dim p_rng As Microsoft.Office.Interop.Excel.Range&#xA;Dim lastRow As Integer&#xA;Try&#xA; excel = New Microsoft.Office.Interop.Excel.ApplicationClass'create the instance of excel work book'&#xA; 'wb = excel.Workbooks.Open(&quot;C:\Users\svc_friend2\Documents\GLO_All_Data_with_SLAs 5_7_19.xlsx&quot;)'Open the excel the file'&#xA; wb1=excel.Workbooks.Open(arg_GLOTemplatePath+&quot;GLO_&quot;+arg_CurrentFiscalMonth+&quot;’&quot;+arg_CurrentFiscalYear+&quot;_YTD_DASHBOARD.xlsb&quot;)&#xA; excel.Visible=True&#xA; &#xA;&#xA; ws=CType(wb1.Sheets(&quot;Data&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; ws.Activate&#xA;&#xA; lastRow = ws.UsedRange.Rows.Count&#xA; &#xA;Dim con As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;Dim cn As Microsoft.Office.Interop.Excel.WorkbookConnection&#xA;For Each con In wb1.Connections&#xA; If con.Name &lt;&gt; &quot;DataModel&quot; Then&#xA; cn =con&#xA; End If&#xA;Next   &#xA;  'With wb1&#xA; &#xA;' cn=  .Connections.Add2(Name :=&quot;SpendDataModel&quot;,Description:=&quot;DataModel&quot;,ConnectionString:=&quot;WORKSHEET;&quot;+wb1.FullName,CommandText:=ws.Name+&quot;!&quot;+ws.Range(&quot;A1&quot;).CurrentRegion.address,lCmdtype:=Microsoft.Office.Interop.Excel.XlCmdType.xlCmdExcel,CreateModelConnection:=True)&#xA;&#xA; 'End With &#xA;    &#xA; 'rng=ws.Range(&quot;A1&quot;,&quot;O&quot;+lastRow.ToString)'Selects the given range of sheet 1'&#xA; 'p_ws=CType(wb.Sheets.Add,Microsoft.Office.Interop.Excel.Worksheet)'create a empty and and name the sheet as pivot table'&#xA; 'p_ws.Name=&quot;Pivot Test&quot;&#xA; p_ws=CType(wb1.Sheets(&quot;Task Age Summary&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; p_ws.Activate&#xA;&#xA;&#xA; &#xA; p_rng= CType(p_ws.Range(&quot;AD13&quot;),Microsoft.Office.Interop.Excel.Range) 'Specify the first cell for the pivot table'&#xA; &#xA; 'Creation pivot Cache and pivot table '&#xA; Dim oPivotCache As Microsoft.Office.Interop.Excel.PivotCache=Nothing&#xA; Dim oPivotTables As Microsoft.Office.Interop.Excel.PivotTables=Nothing&#xA; Dim oPivotTable As Microsoft.Office.Interop.Excel.PivotTable=Nothing&#xA;&#xA;&#xA;oPivotCache =CType(wb1.PivotCaches.Create(SourceType:=Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlExternal,SourceData:=cn,Version:=Microsoft.Office.Interop.Excel.XlPivotTableVersionList.xlPivotTableVersion15),Microsoft.Office.Interop.Excel.PivotCache)&#xA;&#xA;oPivotTables=DirectCast(p_ws.PivotTables(Type.Missing),Microsoft.Office.Interop.Excel.PivotTables)&#xA;&#xA; oPivotTable=oPivotTables.Add(oPivotCache,p_rng,&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM&quot;,Type.Missing,Type.Missing)'first paramenter is cache,range the table should start,table name'&#xA; oPivotTable.SmallGrid=False&#xA; oPivotTable.ShowTableStyleRowStripes=True&#xA; oPivotTable.TableStyle2=&quot;PivotStyleMedium2&quot;&#xA;&#xA;&#xA; 'Creation of pivot Fields'&#xA; &#xA;&#xA;Dim CubeField1 As Microsoft.Office.Interop.Excel.CubeField &#xA;Dim CubeField2 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField3 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField4 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField5 As Microsoft.Office.Interop.Excel.CubeField&#xA;Dim CubeField6 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField7 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField8 As Microsoft.Office.Interop.Excel.CubeField&#xA; Dim CubeField9 As Microsoft.Office.Interop.Excel.CubeField&#xA;  Dim CubeField10 As Microsoft.Office.Interop.Excel.CubeField&#xA;  &#xA;Dim index As Integer = 1&#xA;While index &lt;= CInt(oPivotTable.CubeFields.Count)&#xA;&#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Yr]&quot;) Then &#xA;&#xA;  CubeField1= oPivotTable.CubeFields(index)&#xA;   CubeField1.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;   CubeField1.CurrentPageName=&quot;[Range].[Task Closed Fiscal Yr].&amp;[FY'&quot;+arg_CurrentFiscalYear+&quot;]&quot;&#xA;  'CubeField1.Caption(&quot;Diversity (Yes/No)&quot;)&#xA; Else &#xA; End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Status]&quot;) Then&#xA;&#xA;   CubeField2= oPivotTable.CubeFields(index)&#xA;  CubeField2.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  CubeField2.CurrentPageName=&quot;[Range].[Task Status].&amp;[Closed-Complete]&quot;&#xA;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Ticket Stage]&quot;) Then&#xA;&#xA;   CubeField3= oPivotTable.CubeFields(index)&#xA;  CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;  'CubeField3.CurrentPageName=&quot;[Range].[Ticket Stage]&quot;&#xA; Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Catalog]&quot;) Then&#xA;&#xA;   CubeField4= oPivotTable.CubeFields(index)&#xA;  CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Item Category]&quot;) Then&#xA;&#xA;   CubeField5= oPivotTable.CubeFields(index)&#xA;  CubeField5.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA; If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Requested For Region]&quot;) Then&#xA;&#xA;   CubeField6= oPivotTable.CubeFields(index)&#xA;  CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA;  Else &#xA;  End If &#xA;  If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Aging Grouping]&quot;) Then&#xA;&#xA;   CubeField7= oPivotTable.CubeFields(index)&#xA;  CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA; &#xA;  Else &#xA;  End If &#xA;   If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Number]&quot;) Then&#xA;&#xA;   CubeField8= oPivotTable.CubeFields(index)&#xA;  CubeField8 = oPivotTable.CubeFields.GetMeasure(oPivotTable.CubeFields(index).Name, Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlDistinctCount)&#xA;   oPivotTable.AddDataField(CubeField8)&#xA; &#xA;  Else &#xA;  End If &#xA;    If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Closed Fiscal Qtr]&quot;) Then&#xA;&#xA;   CubeField9= oPivotTable.CubeFields(index)&#xA;  CubeField9.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA; &#xA;  Else &#xA;  End If &#xA;     If oPivotTable.CubeFields(index).Name.ToString.Equals(&quot;[Range].[Task Assigned to]&quot;) Then&#xA;&#xA;   CubeField10= oPivotTable.CubeFields(index)&#xA;  'CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA; &#xA;  Else &#xA;  End If &#xA; &#xA;  &#xA; index += 1&#xA;End While&#xA;&#xA;CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlColumnField&#xA;CubeField7.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA;Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(oPivotTable.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Task Aging Grouping].[Task Aging Grouping]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;)   &#xA;CubeField10.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Task Assigned to].[Task Assigned to]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;CPTF.Autosort(2,&quot;[Measures].[Distinct Count of Task Number]&quot;) &#xA;CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; 'Dim PTFs As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs = CType(PivotAPSpend.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;'Dim CPTF As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF=CType(PTFs.Item(&quot;[Range].[Ticket Stage].[Ticket Stage]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index1 As Integer = 1&#xA;Dim arrstring As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring As String&#xA;&#xA;Dim pvtitm As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm In pivotItms&#xA;&#xA; If pvtitm.Name.equals( &quot;[Range].[Ticket Stage].&amp;[Cancelled]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring=CType(pvtitm.Name,String)&#xA;  &#xA;  arrstring.Add(itemstring)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF.VisibleItemsList =arrstring.ToArray&#xA;    CubeField3.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA; &#xA; &#xA;&#xA; &#xA;&#xA; CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend1 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs1 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs1 = CType(PivotAPSpend1.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF1 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF1=CType(PTFs1.Item(&quot;[Range].[Item Catalog].[Item Catalog]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms1 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF1.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index2 As Integer = 1&#xA;Dim arrstring1 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring1 As String&#xA;&#xA;Dim pvtitm1 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm1 In pivotItms1&#xA;&#xA; If pvtitm1.Name.equals( &quot;[Range].[Item Catalog].&amp;[Incoming]&quot; )Then&#xA;  &#xA;  &#xA; Else &#xA;  &#xA;  itemstring1=CType(pvtitm1.Name,String)&#xA;  &#xA;  arrstring1.Add(itemstring1)&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF1.VisibleItemsList =arrstring1.ToArray&#xA;    CubeField4.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA; &#xA;&#xA;&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlRowField&#xA;&#xA; Dim PivotAPSpend3 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs3 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs3 = CType(PivotAPSpend3.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF3 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF3=CType(PTFs3.Item(&quot;[Range].[Requested For Region].[Requested For Region]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms3 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF3.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index4 As Integer = 1&#xA;Dim arrstring3 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring3 As String&#xA;&#xA;Dim pvtitm3 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm3 In pivotItms3&#xA;&#xA; If pvtitm3.Name.equals(&quot;[Range].[Requested For Region].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring3=CType(pvtitm3.Name,String)&#xA;  &#xA;  arrstring3.Add(itemstring3)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF3.VisibleItemsList =arrstring3.ToArray&#xA;CubeField6.Orientation=Microsoft.Office.Interop.Excel.XlPivotFieldOrientation.xlPageField&#xA;&#xA;Dim PivotAPSpend2 As Microsoft.Office.Interop.Excel.PivotTable=  CType(p_ws.PivotTables(&quot;TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM&quot;),Microsoft.Office.Interop.Excel.PivotTable)&#xA;&#xA; Dim PTFs2 As Microsoft.Office.Interop.Excel.PivotFields&#xA;PTFs2 = CType(PivotAPSpend2.PivotFields,Microsoft.Office.Interop.Excel.PivotFields)&#xA;&#xA;&#xA;Dim CPTF2 As Microsoft.Office.Interop.Excel.PivotField&#xA;CPTF2=CType(PTFs2.Item(&quot;[Range].[Task Assigned to].[Task Assigned to]&quot;),Microsoft.Office.Interop.Excel.PivotField)&#xA;&#xA;&#xA;Dim pivotItms2 As microsoft.Office.Interop.Excel.PivotItems = CType(CPTF2.PivotItems,Microsoft.Office.Interop.Excel.PivotItems)&#xA;&#xA;&#xA;&#xA;Dim index3 As Integer = 1&#xA;Dim arrstring2 As System.Collections.ArrayList = New System.Collections.ArrayList&#xA;&#xA;Dim itemstring2 As String&#xA;&#xA;Dim pvtitm2 As Microsoft.Office.Interop.Excel.PivotItem&#xA;For Each pvtitm2 In pivotItms2&#xA;&#xA; If pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;[Mandhare, Ajay]&quot;) Or pvtitm2.Name.equals(&quot;[Range].[Task Assigned to].&amp;&quot;)  Then  &#xA;&#xA; Else &#xA;     &#xA;  itemstring2=CType(pvtitm2.Name,String)&#xA;  &#xA;  arrstring2.Add(itemstring2)&#xA;&#xA;&#xA; End If  &#xA;Next &#xA;&#xA;CPTF2.VisibleItemsList =arrstring2.ToArray&#xA;&#xA;oPivotTable.RowAxisLayout(Microsoft.Office.Interop.Excel.XlLayoutRowType.xlTabularRow) &#xA;Dim Count As Integer&#xA;Dim tempstr As String&#xA;tempstr=p_ws.Range(&quot;AD:AD&quot;).Find(&quot;Grand Total&quot;).Address.ToString.Replace(&quot;$&quot;,&quot;&quot;).ToString&#xA;count=CInt((Split(tempstr.ToString,&quot;AD&quot;)(1).ToString))&#xA;p_ws.Range(&quot;AF15:AJ&quot;+Count.ToString).HorizontalAlignment=Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter&#xA;Catch es As Exception&#xA; Console.WriteLine(es.Message)&#xA; Console.WriteLine(es.Source)&#xA; Throw es&#xA;Finally&#xA; wb1.Save&#xA; wb1.Close&#xA; excel.Quit&#xA;End Try&#xA;" DisplayName="Invoke Code-TASK COUNT BY TASK AGING CATEGORY BY QTR &amp; GLO TEAM" sap2010:WorkflowViewState.IdRef="InvokeCode_4">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalYear">[in_CurrentYear]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalMonth">[in_CurrentMonth]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_GLOTemplatePath">[in_GLOTemplatePath]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excel As microsoft.Office.Interop.Excel.Application&#xA;Dim wb1 As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim p_ws As Microsoft.Office.Interop.Excel.Worksheet&#xA;Dim rng As Microsoft.Office.Interop.Excel.Range &#xA;Dim p_rng As Microsoft.Office.Interop.Excel.Range&#xA;Dim lastRow As Integer&#xA;Try&#xA; excel = New Microsoft.Office.Interop.Excel.ApplicationClass'create the instance of excel work book'&#xA; 'wb = excel.Workbooks.Open(&quot;C:\Users\svc_friend2\Documents\GLO_All_Data_with_SLAs 5_7_19.xlsx&quot;)'Open the excel the file'&#xA; wb1=excel.Workbooks.Open(arg_GLOTemplatePath+&quot;GLO_&quot;+arg_CurrentFiscalMonth+&quot;’&quot;+arg_CurrentFiscalYear+&quot;_YTD_DASHBOARD.xlsb&quot;)&#xA; excel.Visible=True&#xA; &#xA;ws=CType(wb1.Sheets(&quot;Task Age Summary&quot;),Microsoft.Office.Interop.Excel.Worksheet)'select a sheet and activiates'&#xA; ws.Activate&#xA;&#xA; lastRow = ws.UsedRange.Rows.Count&#xA; &#xA; Dim AddNo As Integer=15&#xA;While  ws.Range(&quot;G&quot;+AddNo.ToString).Value.ToString&lt;&gt;&quot;Grand Total&quot;&#xA;AddNo =AddNo+ 1&#xA;End While&#xA; ws.Range(&quot;B26&quot;).Value=&quot;6 - 10 Days&quot;&#xA; ws.Range(&quot;B27&quot;).Value=&quot;&lt; 1 Day&quot;&#xA; ws.Range(&quot;B28&quot;).Value=&quot;2 - 5 Days&quot;&#xA; ws.Range(&quot;B29&quot;).Value=&quot;1 Day&quot;&#xA; ws.Range(&quot;D5:D8&quot;).Formula=&quot;=IFERROR(VLOOKUP(B26,$G$13:$K$&quot;+(AddNo-1).ToString+&quot;,5,FALSE),0)&quot;&#xA; ws.Range(&quot;C15&quot;).Formula=&quot;=SUM(D5:D8)&quot;&#xA;ws.Range(&quot;C16:C23&quot;).Formula=&quot;=IFERROR(VLOOKUP(B16,$G$13:$K$&quot;+AddNo.ToString+&quot;,5,FALSE),0)&quot;&#xA;ws.Range(&quot;D15:D23&quot;).Formula=&quot;=IFERROR(VLOOKUP(B15,$B$14:$C$23,MATCH($C$14,$B$14:$C$14,0),FALSE),0)/IFERROR(VLOOKUP($B$23,$B$14:$C$23,MATCH($C$14,$B$14:$C$14,0),FALSE),0)&quot;&#xA;ws.Range(&quot;C15:C23&quot;).Copy&#xA;ws.Range(&quot;C15:C23&quot;).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues) &#xA;ws.Range(&quot;D15:D23&quot;).Copy&#xA;ws.Range(&quot;D15:D23&quot;).PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues) &#xA;ws.Range(&quot;D5:D8&quot;).Value=&quot;&quot;&#xA;ws.Range(&quot;B26:B29&quot;).Value=&quot;&quot;&#xA;&#xA;&#xA;&#xA;Catch es As Exception&#xA; Console.WriteLine(es.Message)&#xA; Console.WriteLine(es.Source)&#xA; Throw es&#xA;Finally&#xA; wb1.Save&#xA; wb1.Close&#xA; excel.Quit&#xA; &#xA;End Try&#xA;" DisplayName="Invoke Code-TASK COUNT BY TASK AGING CATEGORY (GROUPING)" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalYear">[in_CurrentYear]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_CurrentFiscalMonth">[in_CurrentMonth]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="arg_GLOTemplatePath">[in_GLOTemplatePath]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="First Sheet Pivot Complete" />
    <sads:DebugSymbol.Symbol>d3FDOlxVc2Vyc1xzdmNfYm90cGQxNlxEb2N1bWVudHNcVWlQYXRoXEdMTyBUQVQgRGFzaGJvYXJkIEF1dG9tYXRpb25cQ3VzdG9tIFdvcmtmbG93c1xUYXNrQWdlU3VtbWFyeUNvbXBvbmVudHMueGFtbBddA4MBDgIBAV4FZBUCASBlBWsVAgEZbAVyFQIBEnMFeRUCAQt6BYABFQIBBIEBBYEBkQECAQJiTmJeAgElYExgYAIBI2FPYWACASFnTmdeAgEeaUxpYAIBHGhPaGACARpuTm5eAgEXcExwYAIBFW9Pb2ACARN1TnVeAgEQd0x3YAIBDnZPdmACAQx8TnxeAgEJfkx+YAIBB31PfWACAQWBAXKBAY4BAgED</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="InvokeCode_1" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="InvokeCode_2" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="InvokeCode_3" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="InvokeCode_4" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="InvokeCode_5" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="LogMessage_1" sap:VirtualizedContainerService.HintSize="314.4,92.8" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="336.8,1241.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TaskAgeSummaryComponents_1" sap:VirtualizedContainerService.HintSize="376.8,1321.6" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>